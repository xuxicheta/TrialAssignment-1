#!/usr/bin/env node

/**
 * express generated starting file modified to fit ESLint advices
 */
const app = require('../app');
const debug = require('debug')('api:server');
const http = require('http');
const settings = require('../config/settings.json');

process.env.NODE_ENV = process.env.NODE_ENV || 'development';

function normalizePort(val) {
  const _port = parseInt(val, 10);  // eslint-disable-line
  if (isNaN(_port)) return val;  // eslint-disable-line
  if (_port >= 0) return _port;
  return false;
}
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || settings.port || 3000);
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);


function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    console.log(`${bind} requires elevated privileges`); // eslint-disable-line
    process.exit(1);
    break;
  case 'EADDRINUSE':
    console.log(`${bind} is already in use`);  // eslint-disable-line
    process.exit(1);
    break;
  default:
    throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
